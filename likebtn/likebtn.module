<?php

/**
 * @file
 * Implements the LikeBtn module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Component\Utility\Html;
use Drupal\node\Entity\Node;
use Drupal\likebtn\LikebtnInterface;

define('LIKEBTN_SETTINGS', serialize(array(
    "identifier"             => array("default" => ''),
    "local_domain"           => array("default" => ''),
    "domain_from_parent"     => array("default" => FALSE),
    "subdirectory"           => array("default" => ''),
    "lang"                   => array("default" => "en"),
    "show_like_label"        => array("default" => TRUE),
    "show_dislike_label"     => array("default" => FALSE),
    "popup_dislike"          => array("default" => FALSE),
    "like_enabled"           => array("default" => TRUE),
    "dislike_enabled"        => array("default" => TRUE),
    "icon_like_show"         => array("default" => TRUE),
    "icon_dislike_show"      => array("default" => TRUE),
    "lazy_load"              => array("default" => FALSE),
    "counter_type"           => array("default" => "number"),
    "counter_clickable"      => array("default" => FALSE),
    "counter_show"           => array("default" => TRUE),
    "counter_padding"        => array("default" => ''),
    "counter_zero_show"      => array("default" => FALSE),
    "display_only"           => array("default" => FALSE),
    "unlike_allowed"         => array("default" => TRUE),
    "like_dislike_at_the_same_time" => array("default" => FALSE),
    "revote_period"          => array("default" => ''),
    "style"                  => array("default" => 'white'),
    "share_enabled"          => array("default" => TRUE),
    "item_url"               => array("default" => ''),
    "item_title"             => array("default" => ''),
    "item_description"       => array("default" => ''),
    "item_image"             => array("default" => ''),
    "item_date"              => array("default" => ''),
    "addthis_pubid"          => array("default" => ''),
    "addthis_service_codes"  => array("default" => ''),
    "loader_show"            => array("default" => FALSE),
    "loader_image"           => array("default" => ''),
    "tooltip_enabled"        => array("default" => TRUE),
    "show_copyright"         => array("default" => TRUE),
    "rich_snippet"           => array("default" => FALSE),
    "popup_html"             => array("default" => ''),
    "popup_donate"           => array("default" => ''),
    "popup_content_order"    => array("default" => 'popup_share,popup_donate,popup_html'),
    "popup_enabled"          => array("default" => TRUE),
    "popup_position"         => array("default" => 'top'),
    "popup_style"            => array("default" => 'light'),
    "popup_hide_on_outside_click"  => array("default" => TRUE),
    "event_handler"          => array("default" => ''),
    "info_message"           => array("default" => ''),
    "i18n_like"              => array("default" => ''),
    "i18n_dislike"           => array("default" => ''),
    "i18n_after_like"        => array("default" => ''),
    "i18n_after_dislike"     => array("default" => ''),
    "i18n_like_tooltip"      => array("default" => ''),
    "i18n_dislike_tooltip"   => array("default" => ''),
    "i18n_unlike_tooltip"    => array("default" => ''),
    "i18n_undislike_tooltip" => array("default" => ''),
    "i18n_share_text"        => array("default" => ''),
    "i18n_popup_close"       => array("default" => ''),
    "i18n_popup_text"        => array("default" => ''),
    "i18n_popup_donate"      => array("default" => ''))));

define('LIKEBTN_LANGS', serialize(array(
    'en' => '[en] - English',
      'ru' => '[ru] - Русский',
      'af' => '[af] - Afrikaans',
      'ar' => '[ar] - العربية',
      'hy' => '[hy] - Հայերեն',
      'bn' => '[bn] - বাংলা',
      'bg' => '[bg] - Български език',
      'ca' => '[ca] - Català',
      'zh_CN' => '[zh_CN] - 简体中文',
      'cs' => '[cs] - Čeština',
      'nl' => '[nl] - Nederlands',
      'fa' => '[fa] - فارسی',
      'fi' => '[fi] - Suomi',
      'fr' => '[fr] - Français',
      'da' => '[da] - Dansk',
      'de' => '[de] - Deutsch',
      'el' => '[el] - Ελληνικά',
      'he' => '[he] - עברית',
      'hu' => '[hu] - Hungarian',
      'id' => '[id] - Bahasa Indonesia',
      'it' => '[it] - Italiano',
      'ja' => '[ja] - 日本語',
      'kk' => '[kk] - Қазақ тілі',
      'ko' => '[ko] - 한국어',
      'lt' => '[lt] - Lietuvių kalba',
      'ne' => '[ne] - नेपाली',
      'no' => '[no] - Norsk bokmål',
      'pl' => '[pl] - Polski',
      'pt' => '[pt] - Português',
      'pt_BR' => '[pt_BR] - Português do Brasil',
      'ro' => '[ro] - Română',
      'es' => '[es] - Español',
      'sv' => '[sv] - Svenska',
      'th' => '[th] - ไทย',
      'tr' => '[tr] - Türkçe',
      'uk' => '[uk] - Українська мова',
      'vi' => '[vi] - Tiếng Việt')));

define('LIKEBTN_STYLES', serialize(array(
  'white',
  'lightgray',
  'gray',
  'black',
  'padded',
  'drop',
  'line',
  'github',
  'transparent',
  'youtube',
  'habr',
  'heartcross',
  'plusminus',
  'google',
  'greenred',
  'large',
  'elegant',
  'disk',
  'squarespace',
  'slideshare',
  'baidu',
  'uwhite',
  'ublack',
  'uorange',
  'ublue',
  'ugreen',
  'direct',
  'homeshop')));

// LikeBtn website locales available.
define('LIKEBTN_WEBSITE_LOCALES', serialize(array(
    "en",
    "ru")));

/**
 * Implements hook_theme().
 */
function likebtn_theme($existing, $type, $theme, $path) {
  return array(
    'demo' => array(
      'variables' => array(
        'data' => ''
      )
    )
  );
}

/**
 * Implements hook_help().
 */
function likebtn_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.likebtn':
      $output = file_get_contents(drupal_get_path('module', 'likebtn') . '/README.txt');
      return '<pre>' . Html::escape($output) . '</pre>';
  }
}

/**
 * Implements hook_entity_view().
 */
function likebtn_entity_view($entity, $type, $view_mode, $langcode) {
  $config = \Drupal::config('likebtn.settings');

  if (!in_array($type, array('node', 'comment'))) {
    return;
  }

  // Check if module is enabled for the current entity view mode.
  if (!in_array($view_mode, $config->get('likebtn_view_modes', array()), TRUE)) {
    return;
  }

  // Check user authorization.
  $user_logged_in = $config->get('likebtn_user_logged_in', 'all');

  if ($user_logged_in != 'all') {
    if ($user_logged_in == 'logged_in' && !user_is_logged_in()) {
      return;
    }
    if ($user_logged_in == 'not_logged_in' && user_is_logged_in()) {
      return;
    }
  }

  if ($type == 'comment') {
    $comment_node = Node::load($entity->nid);
    // Check if LikeBtn is enabled for comments to the current node type.
    if (!in_array($comment_node->type, $config->get('likebtn_comments_nodetypes', array()), TRUE)) {
      return;
    }
    $entity_id = $entity->cid;
  }
  else {
    // Check if LikeBtn is enabled for the current node type.
    if (!in_array($entity->type, $config->get('likebtn_nodetypes', array()), TRUE)) {
      return;
    }
    $entity_id = $entity->nid;
  }

  $entity->content['likebtn_display'] = array(
    '#markup' => _likebtn_get_markup($type, $entity_id),
    '#weight' => $config->get('likebtn_weight'),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add comment configuration settings to the edit content type form.
 */
function likebtn_form_node_type_form_alter(&$form, $form_state) {
  $config = \Drupal::config('likebtn-settings');

  $form['comment']['likebtn_comments_sort_enabled'] = array(
    '#title' => t('Sort comments by LikeBtn likes/dislikes'),
    '#type' => 'checkbox',
    '#default_value' => $config->get('likebtn_comments_sort_enabled_' . $form['#node_type']->type, FALSE),
  );
  // Sort by.
  $form['comment']['likebtn_comments_sort_by'] = array(
    '#title' => t('Sort by'),
    '#type' => 'select',
    '#states' => array(
      'visible' => array(
        ':input[name="likebtn_comments_sort_enabled"]' => array('checked' => TRUE),
      ),
    ),
    '#options' => array(
      LikebtnInterface::LIKEBTN_COMMENTS_SORT_BY_LIKES => t('Likes'),
      LikebtnInterface::LIKEBTN_COMMENTS_SORT_BY_DISLIKES => t('Dislikes'),
      LikebtnInterface::LIKEBTN_COMMENTS_SORT_BY_LIKES_MINUS_DISLIKES => t('Likes minus dislikes')),
    '#default_value' => $config->get('likebtn_comments_sort_by_' . $form['#node_type']->type, LikebtnInterface::LIKEBTN_COMMENTS_SORT_BY_LIKES),
  );
  // Sort order.
  $form['comment']['likebtn_comments_sort_order'] = array(
    '#title' => t('Sort order'),
    '#type' => 'select',
    '#states' => array(
      'visible' => array(
        ':input[name="likebtn_comments_sort_enabled"]' => array('checked' => TRUE),
      ),
    ),
    '#options' => array(
      LikebtnInterface::LIKEBTN_COMMENTS_SORT_ORDER_DESC => t('Descending'),
      LikebtnInterface::LIKEBTN_COMMENTS_SORT_ORDER_ASC => t('Ascending')),
    '#default_value' => $config->get('likebtn_comments_sort_order_' . $form['#node_type']->type, LikebtnInterface::LIKEBTN_COMMENTS_SORT_ORDER_DESC),
  );
}


/**
 * IN PROGRESS
 */

/**
 * Get module public URL.
 */
function _likebtn_public_url() {
  return _likebtn_subdirectory() . drupal_get_path('module', 'likebtn');
}

/**
 * Get subdirectory.
 */
function _likebtn_subdirectory() {
  global $base_url;
  return parse_url($base_url, PHP_URL_PATH) . '/';
}

/**
 * Implements hook_field_instance_settings_form().
 */
function likebtn_field_instance_settings_form($field, $instance) {
  $form = _likebtn_settings_form(_likebtn_flatten_field_instance_settings($instance['settings']));

  return $form;
}

/**
 * Get settings values set for item or instance.
 */
function _likebtn_field_load($field, $item, $instance) {
  $field_info = likebtn_field_info();
  $keys = array_keys($field_info['likebtn_field']['settings']);
  $value = array();

  foreach ($keys as $key) {
    if (isset($item[$key])) {
      $value[$key] = $item[$key];
    }
    else {
      // Search for key in instance settings.
      // We have to come through instance settings as it is 2-dimentional.
      // array due to form fieldsets.
      $instance_settings_exists = FALSE;
      foreach ($instance['settings'] as $instance_settings) {
        if (is_array($instance_settings)) {
          foreach ($instance_settings as $instance_settings_key => $instance_settings_value) {
            if ($instance_settings_key == $key) {
              $instance_settings_exists = TRUE;
              break;
            }
          }
          if ($instance_settings_exists) {
            break;
          }
        }
      }

      if ($instance_settings_exists) {
        $value[$key] = $instance_settings_value;
      }
      else {
        // New option has not been activated.
        if (isset($field['settings'][$key])) {
          $value[$key] = $field['settings'][$key];
        }
        else {
          $settings = unserialize(LIKEBTN_SETTINGS);
          $value[$key] = $settings[$key]['default'];
        }
      }
    }
  }
  return $value;
}

/**
 * Custom function for flattening field instance settings.
 */
function _likebtn_flatten_field_instance_settings($settings) {
  $flat_settings = array();
  foreach ($settings as $settings_fieldset) {
    if (is_array($settings_fieldset)) {
      foreach ($settings_fieldset as $settings_key => $settings_value) {
        $flat_settings[$settings_key] = $settings_value;
      }
    }
  }
  return $flat_settings;
}

/**
 * Implements hook_field_prepare_view().
 */
function likebtn_field_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items) {
  // If there is no values in $items, specify default value.
  foreach ($entities as $id => $entity) {
    if (empty($items[$id])) {
      $items[$id][0] = _likebtn_field_load($field, NULL, $instances[$id]);
    }
  }
}

/**
 * Implements hook_votingapi_views_formatters().
 */
function likebtn_votingapi_views_formatters($details = array()) {
  if ($details->field == 'value') {
    return array(
      'likebtn_views_widget_display_only' => t('LikeBtn widget (display only)'),
      'likebtn_views_widget_full'         => t('LikeBtn widget'),
    );
  }
}

/**
 * Get views widget markup.
 */
function likebtn_views_widget_display_only($value, $field, $columns) {
  return _likebtn_get_views_widget_markup($value, $field, $columns, LikebtnInterface::LIKEBTN_VIEWS_WIDGET_DISPLAY_ONLY);
}

/**
 * Get views widget markup.
 */
function likebtn_views_widget_full($value, $field, $columns) {
  return _likebtn_get_views_widget_markup($value, $field, $columns, LikebtnInterface::LIKEBTN_VIEWS_WIDGET_FULL);
}

/**
 * Get LikeBtn for view.
 */
function _likebtn_get_views_widget_markup($value, $field, $columns, $mode = LikebtnInterface::LIKEBTN_VIEWS_WIDGET_FULL) {

  $entity_name = $field->view->base_table;
  $base_field  = $field->view->base_field;
  $entity_id   = $columns->$base_field;

  $values = NULL;
  if ($mode == LikebtnInterface::LIKEBTN_VIEWS_WIDGET_DISPLAY_ONLY) {
    $values['display_only'] = TRUE;
  }

  // Find the VotingAPI tag (tag equals to field id (if LikeBtn has been added
  // as field).
  /*foreach ($field->query->table_queue[$field->relationship]['join']->extra
  as $votingapi_setting) {
  if ($votingapi_setting['field'] == 'tag') {
  $tag = $votingapi_setting['value'];
  }
  elseif ($votingapi_setting['field'] == 'value_type') {
  $value_type = $votingapi_setting['value'];
  }
  }
  */

  return _likebtn_get_markup($entity_name, $entity_id, $values);
}

/**
 * Get likes and dislikes count for the node.
 */
function likebtn_get_count($entity, $entity_type) {

  list($entity_id, $entity_revision_id, $bundle) = entity_extract_ids($entity_type, $entity);

  try {
    $query = db_select('votingapi_vote', 'vv')
      ->fields('vv')
      ->condition('vv.entity_type', $entity_type)
      ->condition('vv.entity_id', $entity_id)
      ->condition('vv.value_type', 'points')
      ->condition('vv.tag', LikebtnInterface::LIKEBTN_VOTING_TAG)
      ->orderBy('vv.vote_source', 'ASC');

    $votingapi_results = $query->execute();
  }
  catch (Exception $e) {

  }

  // Display a table with like counts per button.
  $rows = array();
  // Like and dislike rows has been found.
  $records_by_source  = array();

  while (1) {
    $record = $votingapi_results->fetchAssoc();

    // Records with likes and dislikes go one after another.
    if (!count($records_by_source) || $record['vote_source'] == $records_by_source[count($records_by_source) - 1]['vote_source']) {
      // Do nothing.
    }
    elseif (count($records_by_source)) {
      $first_record  = $records_by_source[0];
      $second_record = array('value' => 0);
      if (!empty($records_by_source[1])) {
        $second_record = $records_by_source[1];
      }

      if ($first_record['value'] >= 0 && $second_record['value'] <= 0) {
        $likes    = $first_record['value'];
        $dislikes = abs($second_record['value']);
      }
      else {
        $likes    = $second_record['value'];
        $dislikes = abs($first_record['value']);
      }
      $likes_minus_dislikes = $likes - $dislikes;

      $rows[] = array(
        'button' => _likebtn_get_name($first_record['vote_source']),
        'likes' => $likes,
        'dislikes' => $dislikes,
        'likes_minus_dislikes' => $likes_minus_dislikes,
      );

      $records_by_source = array();
    }
    $records_by_source[] = $record;

    if (!$record) {
      break;
    }
  }

  return $rows;
}

/**
 * Get like button name for the likes page.
 */
function _likebtn_get_name($source) {
  $name = $source;

  $source_parts = explode('_', $source);

  if ($source_parts[0] != 'field') {
    $name = t('Like Button');
  }
  else {
    // Get field name.
    if (!empty($source_parts[1])) {

      $field_info = field_info_field_by_id($source_parts[1]);

      if (isset($field_info['field_name'])) {
        $name = t('Field') . ': ' . str_replace('field_', '', $field_info['field_name']);
      }

      if ($name && !empty($source_parts[3])) {
        $name .= ' (' . $source_parts[3] . ')';
      }
    }
  }

  return $name;
}

/**
 * Prepare option value.
 */
function _likebtn_prepare_option($option_name, $option_value) {
  $settings = unserialize(LIKEBTN_SETTINGS);

  $option_value_prepared = $option_value;

  // Normalize bool.
  if (isset($settings[$option_name]) && is_bool($settings[$option_name]['default'])) {
    if (is_int($option_value)) {
      if ($option_value) {
        $option_value_prepared = 'true';
      }
      else {
        $option_value_prepared = 'false';
      }
    }
  }

  // To avoid XSS.
  $option_value_prepared = htmlspecialchars($option_value_prepared);

  return $option_value_prepared;
}

/**
 * Implements hook_query_TAG_alter().
 *
 * Alter comments query to join with the votingapi_vote table and sort.
 */
/*
function likebtn_query_comment_filter_alter(QueryAlterableInterface $query) {

  if ((get_class($query) == 'PagerDefault') && ($node = $query->getMetaData('node'))) {

    // Should the order of comments for this content type be corrected?
    if (!$config->get('likebtn_comments_sort_enabled_' . $node->type, FALSE)) {
      return;
    }

    // Get the configured default sort ordering for this node type.
    $order = $config->get('likebtn_comments_sort_order_' . $node->type, LikebtnInterface::LIKEBTN_COMMENTS_SORT_ORDER_DESC);

    $orderby = &$query->getOrderBy();
    $expressions = &$query->getExpressions();

    // Remove standard sorting expressions.
    if (isset($expressions['torder'])) {
      unset($expressions['torder']);
    }
    if (isset($orderby['torder'])) {
      unset($orderby['torder']);
    }
    if (isset($orderby['c.cid'])) {
      unset($orderby['c.cid']);
    }

    switch ($config->get('likebtn_comments_sort_by_' . $node->type, LIKEBTN_COMMENTS_SORT_BY_LIKES)) {
      case LikebtnInterface::LIKEBTN_COMMENTS_SORT_BY_LIKES:
        $query->leftJoin('votingapi_vote', 'vv', "vv.entity_type = 'comment' and vv.entity_id = c.cid and vv.tag = '" . LIKEBTN_VOTING_TAG . "' and vv.value > 0");
        $query->addExpression('ABS(vv.value)', 'torder');
        break;

      case LikebtnInterface::LIKEBTN_COMMENTS_SORT_BY_DISLIKES:
        $query->leftJoin('votingapi_vote', 'vv', "vv.entity_type = 'comment' and vv.entity_id = c.cid and vv.tag = '" . LIKEBTN_VOTING_TAG . "' and vv.value < 0");
        $query->addExpression('ABS(vv.value)', 'torder');
        break;

      case LikebtnInterface::LIKEBTN_COMMENTS_SORT_BY_LIKES_MINUS_DISLIKES:
        $query->leftJoin('votingapi_vote', 'vv_like', "vv_like.entity_type = 'comment' and vv_like.entity_id = c.cid and vv_like.tag = '" . LIKEBTN_VOTING_TAG . "' and vv_like.value > 0");
        $query->leftJoin('votingapi_vote', 'vv_dislike', "vv_dislike.entity_type = 'comment' and vv_dislike.entity_id = c.cid and vv_dislike.tag = '" . LIKEBTN_VOTING_TAG . "' and vv_dislike.value < 0");
        $query->addExpression('COALESCE(vv_like.value, 0) + COALESCE(vv_dislike.value, 0)', 'torder');
        break;
    }
    $query->orderBy('torder', $order);
  }
}
*/

/**
 * Test synchronization callback.
 */
function likebtn_test_sync() {

  $likebtn_account_email = '';
  if (isset($_POST['likebtn_account_email'])) {
    $likebtn_account_email = $_POST['likebtn_account_email'];
  }

  $likebtn_account_api_key = '';
  if (isset($_POST['likebtn_account_api_key'])) {
    $likebtn_account_api_key = $_POST['likebtn_account_api_key'];
  }

  $likebtn_account_site_id = '';
  if (isset($_POST['likebtn_account_site_id'])) {
    $likebtn_account_site_id = $_POST['likebtn_account_site_id'];
  }

  // Run test.
  $likebtn = new LikeBtn();

  $test_response = $likebtn->testSync($likebtn_account_email, $likebtn_account_api_key, $likebtn_account_site_id);

  if ($test_response['result'] == 'success') {
    $result_text = t('OK');
  }
  else {
    $result_text = t('Error');
  }

  $response = array(
    'result' => $test_response['result'],
    'result_text' => $result_text,
    'message' => $test_response['message'],
  );

  ob_clean();
  echo json_encode($response);
}

/**
 * Implements hook_votingapi_metadata_alter().
 */
function likebtn_votingapi_metadata_alter(&$data) {
  // Voting API tag name.
  $data['tags'][LikebtnInterface::LIKEBTN_VOTING_TAG] = array(
    'name' => LikebtnInterface::LIKEBTN_VOTING_TAG,
    'description' => 'LikeBtn',
    'module' => 'likebtn',
  );
}








/**
 * All is good
 */

/**
 * Implements hook_filter_info().
 */
function likebtn_filter_info() {
  $filters = array();
  $filters['likebtn'] = array(
    'title' => t('Enable LikeBtn shortcodes'),
    'description' => t('Sets up a filter that enables LikeBtn shortcodes.'),
    'prepare callback' => 'likebtn_filter_prepare',
    'process callback' => 'likebtn_filter_process',
    'tips callback'  => 'likebtn_filter_tips',
    'cache' => TRUE,
  );

  return $filters;
}

/**
 * Process callback for callback_filter_process.
 */
function likebtn_filter_prepare($text, $filter, $format, $langcode, $cache, $cache_id) {
  return $text;
}

/**
 * Process callback for callback_filter_process.
 */
function likebtn_filter_process($text, $filter, $format, $langcode, $cache, $cache_id) {

  $replacements = array();
  $regex = '/(?<!\<code\>)\[' . LikebtnInterface::LIKEBTN_SHORTCODE . '([^}\n]*?)\](?!\<\/code\>)/is';
  preg_match_all($regex, $text, $matches);

  // Found shortcodes.
  if (!empty($matches[1])) {
    // Parse options.
    foreach ($matches[1] as $index => $params_str) {
      $regex_list[$index] = $regex;
      $replacements[$index] = '';

      $regex_params = '/(\w+)\s*=\s*\"(.*?)\"/si';
      preg_match_all($regex_params, $params_str, $matches_params);

      if (!count($matches_params)) {
        continue;
      }

      $settings = array();
      foreach ($matches_params[1] as $matches_params_index => $option) {
        $settings[$option] = _likebtn_prepare_option($option, $matches_params[2][$matches_params_index]);
      }

      // Get button markup.
      $markup = _likebtn_get_markup('', '', $settings, FALSE, FALSE);
      $replacements[$index] = $markup;
    }

    $text = preg_replace($regex_list, $replacements, $text, 1);
  }

  return $text;
}

/**
 * Tips callback for callback_filter_tips.
 */
function likebtn_filter_tips($filter, $format, $long) {
  return '[likebtn identifier="my_button_in_post" style="large" i18n_like="Yeah!"] - ' . t('Insert a Like Button using shortcode.');
}


/**
 * Implements hook_field_widget_info().
 */
function likebtn_field_widget_info() {
  return array(
    'likebtn_default_widget' => array(
      'label'       => 'Like Button',
      'field types' => array('likebtn_field'),
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function likebtn_field_formatter_info() {
  return array(
    'default' => array(
      'label' => t('LikeBtn (default)'),
      'field types' => array('likebtn_field'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function likebtn_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $entity_info = entity_get_info($entity_type);
  $entity_id_key = $entity_info['entity keys']['id'];

  $elements = array();
  foreach ($items as $delta => $item) {
    $elements[$delta] = array(
      '#markup' => _likebtn_get_markup($entity_type, $entity->$entity_id_key . '_field_' . $instance['field_id'] . '_index_' . $delta, _likebtn_flatten_field_instance_settings($instance['settings'])),
    );
  }

  return $elements;
}

/**
 * Implements hook_field_is_empty().
 */
function likebtn_field_is_empty($item, $field) {
  $field_info = likebtn_field_info();
  foreach ($field_info['likebtn_field']['settings'] as $field_name => $dummy) {
    if (!empty($item[$field_name])) {
      return FALSE;
    }
  }
  return TRUE;
}
